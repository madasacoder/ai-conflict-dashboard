[tool.ruff]
# Ruff configuration - Fast Python linter written in Rust
target-version = "py311"
line-length = 100
indent-width = 4

# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "RUF",   # Ruff-specific rules
    "S",     # flake8-bandit (security)
    "T20",   # flake8-print
    "SIM",   # flake8-simplify
    "PTH",   # flake8-use-pathlib
]

ignore = [
    "E501",  # line too long (handled by formatter)
    "S101",  # Use of assert detected (needed for tests)
    "S105",  # Possible hardcoded password (false positives)
    "S106",  # Possible hardcoded password (false positives)
]

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

# Exclude directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*.egg-info",
]

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"
# Indent with spaces
indent-style = "space"
# Unix-style line endings
line-ending = "lf"

[tool.ruff.isort]
# Group imports
combine-as-imports = true
force-wrap-aliases = true

[tool.ruff.per-file-ignores]
# Ignore security warnings in tests
"tests/*" = ["S101", "S105", "S106"]
# Allow print statements in CLI tools
"cli.py" = ["T20"]

[tool.black]
# Black configuration - The uncompromising Python code formatter
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | node_modules
)/
'''

[tool.mypy]
# MyPy configuration - Static type checker for Python
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "pytest.*",
    "structlog.*",
    "pybreaker.*",
    "anthropic.*",
    "google.generativeai.*",
    "openai.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.bandit]
# Bandit configuration - Security linter for Python
exclude_dirs = ["tests", "venv", ".venv", "node_modules"]
skips = ["B101"]  # Skip assert_used test in general

[tool.pytest.ini_options]
# Pytest configuration (additional to pytest.ini)
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=.",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=90",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
branch = true
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/node_modules/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-conflict-dashboard-backend"
version = "1.0.0"
description = "Backend API for AI Conflict Dashboard"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "AI Conflict Dashboard Team"},
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "fastapi>=0.115.6",
    "uvicorn[standard]>=0.34.0",
    "python-multipart>=0.0.16",
    "pydantic>=2.10.4",
    "pydantic-settings>=2.7.1",
    "pybreaker>=1.4.0",
    "structlog>=24.1.0",
    "python-json-logger>=2.0.7",
    "python-dotenv>=1.0.1",
    "aiofiles>=24.1.0",
    "aiohttp>=3.11.0",
    "openai>=1.0.0",
    "anthropic>=0.30.0",
    "google-generativeai>=0.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.25.2",
    "httpx>=0.28.1",
    "bandit>=1.8.0",
    "black>=25.1.0",
    "ruff>=0.9.2",
    "mypy>=1.13.0",
    "ipython>=8.29.0",
    "pre-commit>=4.0.1",
]